(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{183:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),l=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},b=function(e){var t=l(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),b=l(n),u=r,d=b["".concat(o,".").concat(u)]||b[u]||m[u]||i;return n?a.a.createElement(d,s(s({ref:t},p),{},{components:n})):a.a.createElement(d,s({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},99:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return l}));var r=n(3),a=n(7),i=(n(0),n(183)),o={id:"ecosystem",title:"The single-spa ecosystem",sidebar_label:"Overview"},s={unversionedId:"ecosystem",id:"version-4.x/ecosystem",isDocsHomePage:!1,title:"The single-spa ecosystem",description:"The single-spa ecosystem is quickly growing to support as many frameworks and build tools as possible.",source:"@site/versioned_docs/version-4.x/ecosystem.md",slug:"/ecosystem",permalink:"/docs/4.x/ecosystem",editUrl:"https://github.com/single-spa/id.single-spa.js.org/blob/master/website/versioned_docs/version-4.x/ecosystem.md",version:"4.x",sidebar_label:"Overview",sidebar:"version-4.x/docs",previous:{title:"Parcels API",permalink:"/docs/4.x/parcels-api"},next:{title:"single-spa-react",permalink:"/docs/4.x/ecosystem-react"}},c=[{value:"Help for frameworks",id:"help-for-frameworks",children:[]},{value:"Webpack 2+",id:"webpack-2",children:[]},{value:"SystemJS",id:"systemjs",children:[]},{value:"Webpack 1",id:"webpack-1",children:[]}],p={toc:c};function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The single-spa ecosystem is quickly growing to support as many frameworks and build tools as possible."),Object(i.b)("h2",{id:"help-for-frameworks"},"Help for frameworks"),Object(i.b)("p",null,"There is a growing number of projects that help you bootstrap, mount,\nand unmount your applications that are written with popular frameworks. Feel free\nto contribute to this list with your own project:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/4.x/ecosystem-react"}),"single-spa-react")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/4.x/ecosystem-vue"}),"single-spa-vue")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/4.x/ecosystem-angular"}),"single-spa-angular")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/4.x/ecosystem-angularjs"}),"single-spa-angularjs")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/4.x/ecosystem-cycle"}),"single-spa-cycle")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/4.x/ecosystem-ember"}),"single-spa-ember")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/4.x/ecosystem-inferno"}),"single-spa-inferno")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/4.x/ecosystem-preact"}),"single-spa-preact")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/4.x/ecosystem-svelte"}),"single-spa-svelte")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/4.x/ecosystem-riot"}),"single-spa-riot")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/4.x/ecosystem-backbone"}),"single-spa-backbone"))),Object(i.b)("h2",{id:"webpack-2"},"Webpack 2+"),Object(i.b)("p",null,"With webpack 2+, we can take advantage of its support for ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://webpack.js.org/guides/code-splitting/"}),"code splitting")," with ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://webpack.js.org/api/module-methods/#import"}),"import()"),"\nin order to easily lazy-load registered applications when they are needed. When registering\nregistered applications from inside of your single spa config, try the following for your\n",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"configuration#loading-function"}),"loading functions"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import {registerApplication} from 'single-spa';\n\nregisterApplication('app-name', () => import('./my-app.js'), activeWhen);\n\nfunction activeWhen() {\n    return window.location.pathname.indexOf('/my-app') === 0;\n}\n")),Object(i.b)("h2",{id:"systemjs"},"SystemJS"),Object(i.b)("p",null,"Since SystemJS is a Promise-based ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://whatwg.github.io/loader"}),"loader"),", the way to\nlazy load your registered applications is straightforward:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import {registerApplication} from 'single-spa';\n\n// Import the registered application with a SystemJS.import call\nregisterApplication('app-name-1', () => SystemJS.import('./my-app.js'), activeWhen);\n\n// Alternatively, use the more out-of-date System.import (instead of SystemJS.import)\nregisterApplication('app-name-2', () => System.import('./my-other-app.js'), activeWhen);\n\nfunction activeWhen() {\n    return window.location.pathname.indexOf('/my-app') === 0;\n}\n")),Object(i.b)("h2",{id:"webpack-1"},"Webpack 1"),Object(i.b)("p",null,"With webpack 1, there is no support for Promise-based code splitting. Instead, we have to either wrap\na require.ensure in a Promise, or just give up on lazy loading completely."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"import {registerApplication} from 'single-spa';\nimport app1 from './app1'; // Not lazy loading with code splitting :(\n\n// Giving up on lazy loading and code splitting :(\nregisterApplication('app-1', () => Promise.resolve(app1), activeWhen);\n\n// Still doing code splitting! But verbose :(\nregisterApplication('app-2', app2InPromise, activeWhen);\n\n/* Unfortunately, this logic cannot be abstracted into a generic\n * function that handles wrapping require.ensure in a promise for\n * any dynamically imported module. This is because webpack needs to\n * be able to statically analyze the code and find all of the require.ensure\n * calls at build-time, so you can't pass variables into require.ensure.\n */\nfunction app2InPromise() {\n    return new Promise((resolve, reject) => {\n        require.ensure(['./app-2.js'], require => {\n            try {\n                resolve(require('./app-2.js'));\n            } catch(err) {\n                reject(err);\n            }\n        });\n    });\n}\n\nfunction activeWhen() {\n    return window.location.pathname.indexOf('/my-app') === 0;\n}\n")))}l.isMDXComponent=!0}}]);